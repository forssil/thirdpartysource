/**************************************************
*         Copyright 2014 GaoH Inc.
*         Author:  Gu Cheng
*         History: 10/15/2014
*         Content: The Fourier Inverse Transform
***************************************************/

#include <math.h>
#include<string.h>
#include "fft1536.h"
//#include "fft.h"
#include "F2Ttransformer.h"
static const float syn_hwin1536[] =
{ 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f,
 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.00326568302449060f, 0.00653133122139654f, 0.00979690976353120f,
 0.0130623838244212f, 0.0163277185787226f, 0.0195928792025757f, 0.0228578308739732f, 0.0261225387731415f, 0.0293869680829034f, 0.0326510839890541f, 0.0359148516807302f, 0.0391782363507831f, 0.0424412031961482f, 0.0457037174182177f, 0.0489657442232096f, 0.0522272488225408f, 0.0554881964331982f,
 0.0587485522781072f, 0.0620082815865051f, 0.0652673495943116f, 0.0685257215444972f, 0.0717833626874582f, 0.0750402382813820f, 0.0782963135926225f, 0.0815515538960670f, 0.0848059244755092f, 0.0880593906240170f, 0.0913119176443041f, 0.0945634708491004f, 0.0978140155615206f, 0.101063517115434f,
 0.104311940855837f, 0.107559252139219f, 0.110805416333933f, 0.114050398820567f, 0.117294164992310f, 0.120536680255323f, 0.123777910029109f, 0.127017819746879f, 0.130256374855922f, 0.133493540817973f, 0.136729283109585f, 0.139963567222489f, 0.143196358663972f, 0.146427622957236f,
 0.149657325641773f, 0.152885432273726f, 0.156111908426262f, 0.159336719689934f, 0.162559831673053f, 0.165781210002051f, 0.169000820321849f, 0.172218628296224f, 0.175434599608175f, 0.178648699960286f, 0.181860895075097f, 0.185071150695464f, 0.188279432584931f, 0.191485706528087f,
 0.194689938330938f, 0.197892093821269f, 0.201092138849006f, 0.204290039286585f, 0.207485761029311f, 0.210679269995726f, 0.213870532127971f, 0.217059513392146f, 0.220246179778680f, 0.223430497302685f, 0.226612432004326f, 0.229791949949180f, 0.232969017228596f, 0.236143599960061f,
 0.239315664287558f, 0.242485176381927f, 0.245652102441229f, 0.248816408691102f, 0.251978061385125f, 0.255137026805177f, 0.258293271261794f, 0.261446761094532f, 0.264597462672324f, 0.267745342393837f, 0.270890366687836f, 0.274032502013535f, 0.277171714860960f, 0.280307971751302f,
 0.283441239237280f, 0.286571483903491f, 0.289698672366772f, 0.292822771276550f, 0.295943747315206f, 0.299061567198422f, 0.302176197675540f, 0.305287605529916f, 0.308395757579277f, 0.311500620676069f, 0.314602161707814f, 0.317700347597466f, 0.320795145303756f, 0.323886521821554f,
 0.326974444182211f, 0.330058879453919f, 0.333139794742058f, 0.336217157189547f, 0.339290933977196f, 0.342361092324054f, 0.345427599487760f, 0.348490422764893f, 0.351549529491318f, 0.354604887042536f, 0.357656462834033f, 0.360704224321625f, 0.363748139001808f, 0.366788174412103f, 0.369824298131400f, 0.372856477780309f, 0.375884681021500f, 0.378908875560052f, 0.381929029143796f, 0.384945109563656f, 0.387957084653997f,
 0.390964922292967f, 0.393968590402836f, 0.396968056950344f, 0.399963289947038f, 0.402954257449613f, 0.405940927560258f, 0.408923268426988f, 0.411901248243993f, 0.414874835251967f, 0.417843997738458f, 0.420808704038194f, 0.423768922533432f, 0.426724621654288f, 0.429675769879075f, 0.432622335734643f, 0.435564287796707f, 0.438501594690192f, 0.441434225089559f, 0.444362147719143f, 0.447285331353487f, 0.450203744817673f,
 0.453117356987657f, 0.456026136790596f, 0.458930053205187f, 0.461829075261992f, 0.464723172043769f, 0.467612312685803f, 0.470496466376236f, 0.473375602356393f, 0.476249689921113f, 0.479118698419073f, 0.481982597253118f, 0.484841355880587f, 0.487694943813635f, 0.490543330619563f, 0.493386485921141f, 0.496224379396930f, 0.499056980781608f, 0.501884259866291f, 0.504706186498857f, 0.507522730584263f, 0.510333862084874f,
 0.513139551020776f, 0.515939767470098f, 0.518734481569332f, 0.521523663513653f, 0.524307283557232f, 0.527085312013557f, 0.529857719255749f, 0.532624475716878f, 0.535385551890277f, 0.538140918329858f, 0.540890545650427f, 0.543634404527993f, 0.546372465700088f, 0.549104699966070f, 0.551831078187444f, 0.554551571288165f, 0.557266150254951f, 0.559974786137595f, 0.562677450049270f, 0.565374113166837f, 0.568064746731156f,
 0.570749322047389f, 0.573427810485307f, 0.576100183479598f, 0.578766412530168f, 0.581426469202446f, 0.584080325127689f, 0.586727952003282f, 0.589369321593042f, 0.592004405727516f, 0.594633176304287f, 0.597255605288267f, 0.599871664712002f, 0.602481326675966f, 0.605084563348861f, 0.607681346967910f, 0.610271649839161f, 0.612855444337773f, 0.615432702908317f, 0.618003398065067f, 0.620567502392294f, 0.623124988544560f,
 0.625675829247005f, 0.628219997295642f, 0.630757465557648f, 0.633288206971649f, 0.635812194548010f, 0.638329401369127f, 0.640839800589708f, 0.643343365437064f, 0.645840069211391f, 0.648329885286058f, 0.650812787107888f, 0.653288748197443f, 0.655757742149306f, 0.658219742632362f, 0.660674723390082f, 0.663122658240795f, 0.665563521077978f, 0.667997285870527f, 0.670423926663035f, 0.672843417576073f, 0.675255732806462f,
 0.677660846627549f, 0.680058733389484f, 0.682449367519490f, 0.684832723522137f, 0.687208775979615f, 0.689577499552005f, 0.691938868977546f, 0.694292859072910f, 0.696639444733464f, 0.698978600933543f, 0.701310302726717f, 0.703634525246051f, 0.705951243704377f, 0.708260433394556f, 0.710562069689739f, 0.712856128043634f, 0.715142583990764f, 0.717421413146731f, 0.719692591208472f, 0.721956093954524f, 0.724211897245278f,
 0.726459977023235f, 0.728700309313268f, 0.730932870222874f, 0.733157635942429f, 0.735374582745442f, 0.737583686988811f, 0.739784925113070f, 0.741978273642643f, 0.744163709186097f, 0.746341208436385f, 0.748510748171101f, 0.750672305252724f, 0.752825856628867f, 0.754971379332518f, 0.757108850482293f, 0.759238247282672f, 0.761359547024247f, 0.763472727083964f, 0.765577764925362f, 0.767674638098813f, 0.769763324241765f,
 0.771843801078977f, 0.773916046422759f, 0.775980038173207f, 0.778035754318440f, 0.780083172934831f, 0.782122272187247f, 0.784153030329278f, 0.786175425703469f, 0.788189436741551f, 0.790195041964673f, 0.792192219983628f, 0.794180949499084f, 0.796161209301809f, 0.798132978272899f, 0.800096235384001f, 0.802050959697540f, 0.803997130366941f, 0.805934726636848f, 0.807863727843352f, 0.809784113414208f, 0.811695862869051f,
 0.813598955819621f, 0.815493371969975f, 0.817379091116707f, 0.819256093149161f, 0.821124358049648f, 0.822983865893656f, 0.824834596850067f, 0.826676531181363f, 0.828509649243842f, 0.830333931487824f, 0.832149358457860f, 0.833955910792941f, 0.835753569226702f, 0.837542314587631f, 0.839322127799270f, 0.841092989880420f, 0.842854881945342f, 0.844607785203963f, 0.846351680962070f, 0.848086550621513f, 0.849812375680404f,
 0.851529137733311f, 0.853236818471459f, 0.854935399682921f, 0.856624863252814f, 0.858305191163491f, 0.859976365494736f, 0.861638368423954f, 0.863291182226357f, 0.864934789275160f, 0.866569172041762f, 0.868194313095940f, 0.869810195106029f, 0.871416800839108f, 0.873014113161188f, 0.874602115037389f, 0.876180789532125f, 0.877750119809285f, 0.879310089132408f, 0.880860680864870f, 0.882401878470052f, 0.883933665511522f,
 0.885456025653210f, 0.886968942659580f, 0.888472400395805f, 0.889966382827939f, 0.891450874023084f, 0.892925858149569f, 0.894391319477107f, 0.895847242376975f, 0.897293611322169f, 0.898730410887580f, 0.900157625750150f, 0.901575240689041f, 0.902983240585795f, 0.904381610424496f, 0.905770335291929f, 0.907149400377741f, 0.908518790974597f, 0.909878492478338f, 0.911228490388136f, 0.912568770306649f, 0.913899317940175f,
 0.915220119098805f, 0.916531159696571f, 0.917832425751601f, 0.919123903386264f, 0.920405578827320f, 0.921677438406068f, 0.922939468558489f, 0.924191655825391f, 0.925433986852556f, 0.926666448390879f, 0.927889027296509f, 0.929101710530993f, 0.930304485161410f, 0.931497338360514f, 0.932680257406864f, 0.933853229684970f, 0.935016242685415f, 0.936169284004999f, 0.937312341346867f, 0.938445402520639f, 0.939568455442540f,
 0.940681488135534f, 0.941784488729444f, 0.942877445461084f, 0.943960346674384f, 0.945033180820512f, 0.946095936457998f, 0.947148602252858f, 0.948191166978711f, 0.949223619516903f, 0.950245948856623f, 0.951258144095021f, 0.952260194437324f, 0.953252089196952f, 0.954233817795630f, 0.955205369763505f, 0.956166734739251f, 0.957117902470187f, 0.958058862812380f, 0.958989605730758f, 0.959910121299214f, 0.960820399700711f,
 0.961720431227393f, 0.962610206280678f, 0.963489715371372f, 0.964358949119760f, 0.965217898255714f, 0.966066553618787f, 0.966904906158312f, 0.967732946933499f, 0.968550667113529f, 0.969358057977652f, 0.970155110915273f, 0.970941817426052f, 0.971718169119989f, 0.972484157717514f, 0.973239775049578f, 0.973985013057739f, 0.974719863794247f, 0.975444319422128f, 0.976158372215270f, 0.976862014558504f, 0.977555238947686f,
 0.978238037989777f, 0.978910404402919f, 0.979572331016517f, 0.980223810771313f, 0.980864836719461f, 0.981495402024604f, 0.982115499961943f, 0.982725123918310f, 0.983324267392240f, 0.983912923994039f, 0.984491087445854f, 0.985058751581735f, 0.985615910347709f, 0.986162557801834f, 0.986698688114274f, 0.987224295567351f, 0.987739374555611f, 0.988243919585886f, 0.988737925277347f, 0.989221386361563f, 0.989694297682562f,
 0.990156654196878f, 0.990608450973612f, 0.991049683194481f, 0.991480346153868f, 0.991900435258877f, 0.992309946029377f, 0.992708874098054f, 0.993097215210453f, 0.993474965225028f, 0.993842120113182f, 0.994198675959313f, 0.994544628960857f, 0.994879975428322f, 0.995204711785334f, 0.995518834568674f, 0.995822340428311f, 0.996115226127443f, 0.996397488542527f, 0.996669124663314f, 0.996930131592884f, 0.997180506547673f,
 0.997420246857502f, 0.997649349965611f, 0.997867813428680f, 0.998075634916858f, 0.998272812213789f, 0.998459343216633f, 0.998635225936091f, 0.998800458496424f, 0.998955039135474f, 0.999098966204681f, 0.999232238169107f, 0.999354853607442f, 0.999466811212028f, 0.999568109788870f, 0.999658748257647f, 0.999738725651726f, 0.999808041118171f, 0.999866693917751f, 0.999914683424953f, 0.999952009127981f, 0.999978670628767f,
 0.999994667642975f, 0.999994667642975f, 0.999978670628767f, 0.999952009127981f, 0.999914683424953f, 0.999866693917751f, 0.999808041118171f, 0.999738725651726f, 0.999658748257647f, 0.999568109788870f, 0.999466811212028f, 0.999354853607442f, 0.999232238169107f, 0.999098966204681f, 0.998955039135474f, 0.998800458496424f, 0.998635225936091f, 0.998459343216633f, 0.998272812213789f, 0.998075634916858f, 0.997867813428680f,
 0.997649349965611f, 0.997420246857502f, 0.997180506547673f, 0.996930131592884f, 0.996669124663314f, 0.996397488542527f, 0.996115226127443f, 0.995822340428311f, 0.995518834568674f, 0.995204711785334f, 0.994879975428322f, 0.994544628960857f, 0.994198675959313f, 0.993842120113182f, 0.993474965225028f, 0.993097215210453f, 0.992708874098054f, 0.992309946029377f, 0.991900435258877f, 0.991480346153868f, 0.991049683194481f,
 0.990608450973612f, 0.990156654196878f, 0.989694297682562f, 0.989221386361563f, 0.988737925277347f, 0.988243919585886f, 0.987739374555611f, 0.987224295567351f, 0.986698688114274f, 0.986162557801834f, 0.985615910347709f, 0.985058751581735f, 0.984491087445854f, 0.983912923994039f, 0.983324267392240f, 0.982725123918310f, 0.982115499961943f, 0.981495402024604f, 0.980864836719461f, 0.980223810771313f, 0.979572331016517f,
 0.978910404402919f, 0.978238037989777f, 0.977555238947686f, 0.976862014558504f, 0.976158372215270f, 0.975444319422128f, 0.974719863794247f, 0.973985013057739f, 0.973239775049578f, 0.972484157717514f, 0.971718169119989f, 0.970941817426052f, 0.970155110915273f, 0.969358057977652f, 0.968550667113529f, 0.967732946933499f, 0.966904906158312f, 0.966066553618787f, 0.965217898255714f, 0.964358949119760f, 0.963489715371372f,
 0.962610206280678f, 0.961720431227393f, 0.960820399700711f, 0.959910121299214f, 0.958989605730758f, 0.958058862812380f, 0.957117902470187f, 0.956166734739251f, 0.955205369763505f, 0.954233817795630f, 0.953252089196952f, 0.952260194437324f, 0.951258144095021f, 0.950245948856623f, 0.949223619516903f, 0.948191166978711f, 0.947148602252858f, 0.946095936457998f, 0.945033180820512f, 0.943960346674384f, 0.942877445461084f,
 0.941784488729444f, 0.940681488135534f, 0.939568455442540f, 0.938445402520639f, 0.937312341346867f, 0.936169284004999f, 0.935016242685415f, 0.933853229684970f, 0.932680257406864f, 0.931497338360514f, 0.930304485161410f, 0.929101710530993f, 0.927889027296509f, 0.926666448390879f, 0.925433986852556f, 0.924191655825391f, 0.922939468558489f, 0.921677438406068f, 0.920405578827320f, 0.919123903386264f, 0.917832425751601f,
 0.916531159696571f, 0.915220119098805f, 0.913899317940175f, 0.912568770306649f, 0.911228490388136f, 0.909878492478338f, 0.908518790974597f, 0.907149400377741f, 0.905770335291929f, 0.904381610424496f, 0.902983240585795f, 0.901575240689041f, 0.900157625750150f, 0.898730410887580f, 0.897293611322169f, 0.895847242376975f, 0.894391319477107f, 0.892925858149569f, 0.891450874023084f, 0.889966382827939f, 0.888472400395805f,
 0.886968942659580f, 0.885456025653210f, 0.883933665511522f, 0.882401878470052f, 0.880860680864870f, 0.879310089132408f, 0.877750119809285f, 0.876180789532125f, 0.874602115037389f, 0.873014113161188f, 0.871416800839108f, 0.869810195106029f, 0.868194313095940f, 0.866569172041762f, 0.864934789275160f, 0.863291182226357f, 0.861638368423954f, 0.859976365494736f, 0.858305191163491f, 0.856624863252814f, 0.854935399682921f,
 0.853236818471459f, 0.851529137733311f, 0.849812375680404f, 0.848086550621513f, 0.846351680962070f, 0.844607785203963f, 0.842854881945342f, 0.841092989880420f, 0.839322127799270f, 0.837542314587631f, 0.835753569226702f, 0.833955910792941f, 0.832149358457860f, 0.830333931487824f, 0.828509649243842f, 0.826676531181363f, 0.824834596850067f, 0.822983865893656f, 0.821124358049648f, 0.819256093149161f, 0.817379091116707f,
 0.815493371969975f, 0.813598955819621f, 0.811695862869051f, 0.809784113414208f, 0.807863727843353f, 0.805934726636848f, 0.803997130366941f, 0.802050959697540f, 0.800096235384001f, 0.798132978272899f, 0.796161209301809f, 0.794180949499084f, 0.792192219983628f, 0.790195041964673f, 0.788189436741551f, 0.786175425703469f, 0.784153030329278f, 0.782122272187247f, 0.780083172934831f, 0.778035754318440f, 0.775980038173207f,
 0.773916046422759f, 0.771843801078977f, 0.769763324241765f, 0.767674638098813f, 0.765577764925362f, 0.763472727083964f, 0.761359547024247f, 0.759238247282672f, 0.757108850482293f, 0.754971379332518f, 0.752825856628866f, 0.750672305252724f, 0.748510748171101f, 0.746341208436385f, 0.744163709186097f, 0.741978273642643f, 0.739784925113070f, 0.737583686988811f, 0.735374582745442f, 0.733157635942429f, 0.730932870222874f,
 0.728700309313268f, 0.726459977023235f, 0.724211897245278f, 0.721956093954525f, 0.719692591208472f, 0.717421413146731f, 0.715142583990764f, 0.712856128043634f, 0.710562069689739f, 0.708260433394556f, 0.705951243704377f, 0.703634525246051f, 0.701310302726717f, 0.698978600933543f, 0.696639444733464f, 0.694292859072910f, 0.691938868977546f, 0.689577499552005f, 0.687208775979615f, 0.684832723522137f, 0.682449367519490f,
 0.680058733389484f, 0.677660846627549f, 0.675255732806462f, 0.672843417576073f, 0.670423926663035f, 0.667997285870527f, 0.665563521077978f, 0.663122658240795f, 0.660674723390082f, 0.658219742632362f, 0.655757742149306f, 0.653288748197443f, 0.650812787107888f, 0.648329885286058f, 0.645840069211391f, 0.643343365437064f, 0.640839800589708f, 0.638329401369127f, 0.635812194548010f, 0.633288206971649f, 0.630757465557648f,
 0.628219997295642f, 0.625675829247005f, 0.623124988544560f, 0.620567502392294f, 0.618003398065067f, 0.615432702908317f, 0.612855444337773f, 0.610271649839161f, 0.607681346967910f, 0.605084563348861f, 0.602481326675966f, 0.599871664712002f, 0.597255605288267f, 0.594633176304287f, 0.592004405727516f, 0.589369321593042f, 0.586727952003282f, 0.584080325127689f, 0.581426469202446f, 0.578766412530168f, 0.576100183479598f,
 0.573427810485307f, 0.570749322047389f, 0.568064746731156f, 0.565374113166837f, 0.562677450049270f, 0.559974786137595f, 0.557266150254951f, 0.554551571288165f, 0.551831078187444f, 0.549104699966070f, 0.546372465700088f, 0.543634404527993f, 0.540890545650427f, 0.538140918329858f, 0.535385551890277f, 0.532624475716878f, 0.529857719255749f, 0.527085312013557f, 0.524307283557232f, 0.521523663513653f, 0.518734481569332f,
 0.515939767470098f, 0.513139551020776f, 0.510333862084874f, 0.507522730584263f, 0.504706186498857f, 0.501884259866291f, 0.499056980781608f, 0.496224379396930f, 0.493386485921141f, 0.490543330619563f, 0.487694943813635f, 0.484841355880587f, 0.481982597253118f, 0.479118698419073f, 0.476249689921113f, 0.473375602356393f, 0.470496466376236f, 0.467612312685803f, 0.464723172043769f, 0.461829075261992f, 0.458930053205187f,
 0.456026136790596f, 0.453117356987657f, 0.450203744817673f, 0.447285331353487f, 0.444362147719143f, 0.441434225089559f, 0.438501594690192f, 0.435564287796707f, 0.432622335734643f, 0.429675769879075f, 0.426724621654288f, 0.423768922533432f, 0.420808704038194f, 0.417843997738458f, 0.414874835251967f, 0.411901248243993f, 0.408923268426988f, 0.405940927560258f, 0.402954257449613f, 0.399963289947038f, 0.396968056950344f,
 0.393968590402836f, 0.390964922292967f, 0.387957084653997f, 0.384945109563655f, 0.381929029143796f, 0.378908875560052f, 0.375884681021500f, 0.372856477780309f, 0.369824298131400f, 0.366788174412103f, 0.363748139001808f, 0.360704224321625f, 0.357656462834033f, 0.354604887042536f, 0.351549529491318f, 0.348490422764893f, 0.345427599487760f, 0.342361092324054f, 0.339290933977196f, 0.336217157189547f, 0.333139794742058f,
 0.330058879453919f, 0.326974444182211f, 0.323886521821554f, 0.320795145303756f, 0.317700347597466f, 0.314602161707814f, 0.311500620676069f, 0.308395757579277f, 0.305287605529916f, 0.302176197675540f, 0.299061567198422f, 0.295943747315206f, 0.292822771276550f, 0.289698672366772f, 0.286571483903491f, 0.283441239237280f, 0.280307971751302f, 0.277171714860960f, 0.274032502013535f, 0.270890366687836f, 0.267745342393837f,
 0.264597462672324f, 0.261446761094532f, 0.258293271261794f, 0.255137026805177f, 0.251978061385125f, 0.248816408691102f, 0.245652102441229f, 0.242485176381927f, 0.239315664287558f, 0.236143599960061f, 0.232969017228596f, 0.229791949949180f, 0.226612432004326f, 0.223430497302685f, 0.220246179778680f, 0.217059513392146f, 0.213870532127971f, 0.210679269995726f, 0.207485761029311f, 0.204290039286585f, 0.201092138849006f,
 0.197892093821269f, 0.194689938330938f, 0.191485706528087f, 0.188279432584931f, 0.185071150695464f, 0.181860895075097f, 0.178648699960286f, 0.175434599608175f, 0.172218628296224f, 0.169000820321849f, 0.165781210002051f, 0.162559831673053f, 0.159336719689934f, 0.156111908426262f, 0.152885432273726f, 0.149657325641773f, 0.146427622957236f, 0.143196358663972f, 0.139963567222489f, 0.136729283109585f, 0.133493540817973f,
 0.130256374855922f, 0.127017819746879f, 0.123777910029109f, 0.120536680255323f, 0.117294164992310f, 0.114050398820567f, 0.110805416333933f, 0.107559252139219f, 0.104311940855837f, 0.101063517115434f, 0.0978140155615205f, 0.0945634708491004f, 0.0913119176443041f, 0.0880593906240170f, 0.0848059244755092f, 0.0815515538960670f, 0.0782963135926225f, 0.0750402382813820f, 0.0717833626874582f, 0.0685257215444972f, 0.0652673495943116f,
 0.0620082815865051f, 0.0587485522781072f, 0.0554881964331982f, 0.0522272488225408f, 0.0489657442232096f, 0.0457037174182177f, 0.0424412031961482f, 0.0391782363507831f, 0.0359148516807302f, 0.0326510839890541f, 0.0293869680829034f, 0.0261225387731415f, 0.0228578308739732f, 0.0195928792025757f, 0.0163277185787226f, 0.0130623838244212f, 0.00979690976353120f, 0.00653133122139654f, 0.00326568302449060f };
F2Ttransformer::F2Ttransformer(void):
m_input_spe(NULL)
,m_input_tim(NULL)
,m_output_spe(NULL)
,m_shift(0)
,m_fft_len(0)
,AnaWin(NULL)
{
}


F2Ttransformer::~F2Ttransformer(void)
{
	FreeFDanaly();
}

/***************************************************
name:    InitFDanaly
para:    size  (IN)
content: initial parameter
***************************************************/
void F2Ttransformer::InitFDanaly(const int size, const int fft_size)
{
	m_fft_len  = fft_size;

    const float inv_size = 1.0f / (float)1024;
    const float step = 2.0f * AUDIO_COMMON_PI / ((float)1024 - 1.0f);
    for (int i = 0; i < 1024; ++i) {
        float weight = (0.5f * (1.0f - cosf((float)i * step)));
        syn_win1024_new[i] = weight;
        //syn_win1024_new[i] = weight * inv_size;
    }
	const float *fp=NULL;
	switch(m_fft_len)
	{
	case 256:
		fp   = syn_hwin256;
		break;
	case 512:
		fp   = syn_hwin512;
		break;
	case 1024:
		fp   = size==480? syn_win1024_new: syn_hwin1024;
		break;
	case 1536:
		fp = syn_hwin1536;
		break;
	default:
		fp   = syn_hwin256;
		m_fft_len=256;

	}

    m_framelen = size;
	if (m_fft_len == 1536 && 480 == m_framelen) {
		m_shift = m_framelen;

		AnaWin = new float[m_framelen*2];
		for (int i = 0; i < m_framelen * 2; i++)
		{
				AnaWin[i] = (fp[i+576]);
		}
	}
	else {
		m_shift = m_fft_len - size;

		AnaWin = new float[m_fft_len];
		for (int i = 0; i < m_fft_len; i++)
		{
			AnaWin[i] = sqrtf(fp[i]);
		}
	}
	

	//m_input_spe  = new float[size*2];
	//m_input_tim  = new float[size*2];
	//m_output_spe = new float[size*2];

	//memset(m_input_spe,  0, sizeof(float)*size*2);
	//memset(m_input_tim,  0, sizeof(float)*size*2);
	//memset(m_output_spe, 0, sizeof(float)*size*2);

    m_input_spe = new float[m_fft_len];
    m_input_tim = new float[m_fft_len];
    m_output_spe = new float[m_fft_len];

    memset(m_input_spe, 0, sizeof(float)*m_fft_len);
    memset(m_input_tim, 0, sizeof(float)*m_fft_len);
    memset(m_output_spe, 0, sizeof(float)*m_fft_len);

#ifdef ARM_NEON
	if (ne10_init() != NE10_OK)
	{
		return 1;
	}

	m_cfg = ne10_fft_alloc_r2c_float32(m_fft_len);
	m_pdst = new ne10_fft_cpx_float32_t[m_fft_len / 2 + 1];
	memset(m_pdst, 0, sizeof(ne10_fft_cpx_float32_t)*(m_fft_len / 2 + 1));

#endif
}

/***************************************************
name:    FreeFDanaly
content: release the allocated memory
***************************************************/
void F2Ttransformer::FreeFDanaly()
{
	if(m_input_spe)	    delete []m_input_spe;
	if(m_input_tim)	    delete []m_input_tim;
	if(m_output_spe)	delete []m_output_spe;
	if(AnaWin) delete AnaWin;
#ifdef ARM_NEON
	ne10_fft_destroy_r2c_float32(m_cfg);
	if (m_pdst) delete[] m_pdst;

#endif
}

/***************************************************
name:    F2T
para:    inbuf   (IN)  
	        outbuf  (OUT)
content: the fourier inverse transform
***************************************************/
void F2Ttransformer::F2T(const float *inbuf, float *outbuf)
{
	//ifft
#ifndef ARM_NEON
	memcpy(m_input_spe,inbuf,m_fft_len*sizeof(float));

	wbxInvFFT(m_input_spe, m_output_spe, m_fft_len);
	//gh::InvFFT(m_input_spe, m_output_spe, m_fft_len);
#else
	for (int i = 0; i < m_fft_len; i += 2) {
		m_pdst[i / 2].r = inbuf[i]* m_fft_len;
		m_pdst[i / 2].i = inbuf[i+1]* m_fft_len;
	}
	ne10_fft_c2r_1d_float32(m_input_spe,m_pdst, m_cfg);
	
#endif

	//update buffer
	UpdateFDbuffer(m_input_spe);
	//multiple win
	memcpy(outbuf,m_input_tim,sizeof(float)*m_framelen);
    // only add comfact for 480 framelen
    if (m_framelen == 480 && m_fft_len == 1024) {
        for (int n = 0; n < m_framelen; n++) {
            outbuf[n] = outbuf[n] * comfact[n] * 1.f;
        }
		memcpy(m_input_tim, m_input_tim + m_framelen, m_shift * sizeof(float));// save histroy win-buffer 480~544
    }
	else if(m_fft_len == 2* m_framelen)
	{
		// half shift length 
		memcpy(m_input_tim,m_input_spe+m_framelen, m_shift*sizeof(float));

	}
	else if (m_fft_len == 1536 && 480 == m_framelen) {
		memcpy(m_input_tim, m_input_tim + m_framelen, m_shift * sizeof(float));
	}

    memset(m_input_tim + m_shift, 0 ,sizeof(float)*m_framelen);
}

/***************************************************
name:    UpdateFDbuffer
para:    data   (IN)  
content: update data
***************************************************/
void F2Ttransformer::UpdateFDbuffer(float* data)
{
	float* fpin = data;
	float* fpFDin = m_input_tim;
	int i=0;
	if (m_fft_len == 1536 && 480 == m_framelen) {
		fpin = data+ m_fft_len- m_shift - m_framelen;
		for (i = 0; i < m_shift + m_framelen; i++)
		{
			(*fpin) *= AnaWin[i];
			*fpFDin += *fpin;
			fpin++;
			fpFDin++;
		}
	}
	else {
		for (i = 0; i < m_shift; i++)
		{
			(*fpin) *= AnaWin[i];
			*fpFDin += *fpin;
			fpin++;
			fpFDin++;
		}
		for (; i < m_fft_len; i++)
		{
			(*fpin) *= AnaWin[i];
			*fpFDin += *fpin;
			fpin++;
			fpFDin++;
		}
	}

}